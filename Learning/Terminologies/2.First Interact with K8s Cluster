********** Interact Cluster Using KubeCtl **********

1. Use the kubectl create command to create a Deployment that manages a Pod. The Pod runs a Container based on the provided Docker image.
kubectl create deployment hello-node --image=k8s.gcr.io/echoserver:1.10

2. View the Deployment:
kubectl get deployments

3. View the Pod:
kubectl get pods

4. Expose the Pod to the public internet using the kubectl expose command:
kubectl expose deployment hello-node --type=LoadBalancer --port=8080

**The --type=LoadBalancer flag indicates that you want to expose your Service outside of the cluster.

5. View the Service you created:
minikube service hello-node

CleanUP -
1. Remove service
kubectl delete service hello-node

2. Remove Deployments-
kubectl delete deployment hello-node

**************THEORY**************
What is deployment 

A deployment is a declarative Kubernetes resource that manages a group of Pods. It defines the desired state of an application, such as the number of replicas (instances) to run and the image to use. Kubernetes automatically creates, updates, and scales pods to match the desired state specified in the deployment.

Key features of a deployment:

1.Declarative: Deployments describe the desired state of the application, allowing Kubernetes to manage the actual state.
2.Self-healing: If a pod fails, Kubernetes will automatically create a new pod to replace it.
3.Scalability: Deployments can be easily scaled up or down to handle changing workloads.
4.Rolling updates: Kubernetes can update pods gradually, ensuring minimal downtime.


What is Pod

Pod

A pod is the smallest unit of deployment in Kubernetes. It represents a group of containers that are deployed together and share the same lifecycle. Pods are ephemeral, meaning they can be created and destroyed dynamically based on the needs of the application.

Key features of a pod:

Container group: A pod can contain one or more containers.
Shared resources: Containers within a pod share resources like CPU, memory, and storage.
Ephemeral: Pods are short-lived and can be recreated if they fail.
Lifecycle management: Kubernetes manages the lifecycle of pods, including creation, termination, and restarts.
Relationship between deployments and pods:

A deployment defines the desired state of an application, while pods are the actual instances of the application running in the Kubernetes cluster.
A deployment can have multiple pods associated with it.
Kubernetes automatically creates, updates, and scales pods to match the desired state specified in the deployment.















...
